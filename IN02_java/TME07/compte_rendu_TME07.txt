ALABOUD ALAA
MOHAMMAD ICHRAQ

___________________________________________EXERCICE 49__________________________________________


public abstract class Animal{
    protected String nom;
    private int age;

    public Animal(String nom,int age){
        this.nom=nom;
        this.age=age;
    }

    public Animal(String nom){
        this.nom=nom;
        this.age=1;
    }

    public String toString(){
        return "L'animal " + nom + " a " + age + " ans";
    }

    public void vieillir(){
        age++;
    }

    public abstract void crier();
}

public abstract class APattes extends Animal {
    private int nbPattes;

    public APattes(String nom, int age, int nb){
        super(nom,age);
        this.nbPattes=nb;
    }

    public APattes(String nom, int nb){
        super(nom);
        this.nbPattes=nb;
    }

    public String toString(){
        return super.toString() + ", " + nbPattes + " pattes";
    }
}


public class Vache extends APattes {
    public double lait;

    public Vache(String nom, int age){
        super(nom,age,4);
        this.lait= Math.random()*25 +5;
    }

    public Vache(String nom){
        super(nom,4);
        this.lait= Math.random()*25 +5;
    }

    public void crier(){
        System.out.println("La vache " + this.nom + " meugle");
    }

    public String toString(){
        return super.toString() + " et est une vache qui produit " + lait + " litres de lait";
    }
}

public class Canard extends APattes {

    public Canard(String nom, int age){
        super(nom,age,2);
    }

    public Canard(String nom){
        super(nom,2);
    }

    public void crier(){
        System.out.println("Le canard " + this.nom + ": coin-coin ");
    }

    public String toString(){
        return super.toString() + " et est un canard";
    }
}

public abstract class SansPattes extends Animal {
    
    public SansPattes(String nom, int age){
        super(nom,age);
    }

    public SansPattes(String nom){
        super(nom);
    }

    public String toString(){
        return super.toString() + ", sans pattes";
    }
}

public class Boa extends SansPattes {

    public Boa(String nom, int age){
        super(nom,age);
    }

    public Boa(String nom){
        super(nom);
    }
    
    public void crier(){
        System.out.println("...");
    }

    public String toString(){
        return super.toString() + " et est une boa";
    }
}

public class Saumon extends SansPattes{

    public Saumon(String nom, int age){
        super(nom,age);
    }

    public Saumon(String nom){
        super(nom);
    }

    public void crier(){
        System.out.println("...");
    }

    public String toString(){
        return super.toString() + " et est un saumon";
    }
}

public class MillePattes extends SansPattes {

    public MillePattes(String nom, int age){
        super(nom,age);
    }

    public MillePattes(String nom){
        super(nom);
    }

    public void crier(){
        System.out.println("...");
    }

    public String toString(){
        return super.toString() + " et est un mille-pattes";
    }
}

public class Menagerie {
    private int max;
    private Animal[] l;
    private int nb_animal=0;

    public Menagerie(int m){
        max=m;
        this.l = new Animal[m];
    }

    public void ajouter(Animal x){
        if (nb_animal<max){
            l[nb_animal] = x ;
            nb_animal ++;
        }
        else{System.out.println("pas de place dans la menagerie");}
    }

    public String toString(){
        String res="";
        for(int i=0 ; i<nb_animal ; i++){
            res+=l[i].toString() + "\n";
        }
        return res;
    }

    public void midi(){
        for(int i=0 ; i<nb_animal ; i++){
            l[i].crier();
        }
    }

    public void vieillirTous(){
        for(int i=0 ; i<nb_animal ; i++){
            l[i].vieillir();
        }
    }

    public static void main(String[] args) {
        Vache v1 = new Vache("V1");
        Boa b1 = new Boa("B1");
        Canard c1 = new Canard("C1");
        Saumon s1 = new Saumon("S1");
        MillePattes m1 = new MillePattes("M1");

        System.out.println(v1.toString());
        System.out.println(b1.toString());
        System.out.println(c1.toString());
        System.out.println(s1.toString());
        System.out.println(m1.toString());

        Menagerie mena1 = new Menagerie(10);

        mena1.ajouter(v1);
        mena1.ajouter(b1);
        mena1.ajouter(c1);
        mena1.ajouter(s1);
        mena1.ajouter(m1);

        System.out.println(mena1.toString());

        mena1.midi();

        mena1.vieillirTous();
        
        System.out.println(mena1.toString());
    }
}


___________________________________________EXERCICE 50__________________________________________

public abstract class Figure {

    public Figure(){
    }

    public abstract double surface();
}

public abstract class Figure2D extends Figure {

    public Figure2D(){
    }

    public abstract double perimetre();
}

public class Rectangle extends Figure2D {
    private double longueur, larg;

    public Rectangle(double lo, double la){
        longueur=lo;
        larg=la;
    }

    public double surface(){
        return longueur*larg;
    }

    public double perimetre(){
        return (longueur*2) + (larg*2);
    }
}


public class Carre extends Rectangle {
    
    public Carre(double l){
        super(l,l);
    }
}

public class Ellipse extends Figure2D {
    private double grand, petit;

    public Ellipse(double g, double p){
        grand=g;
        petit=p;
    }

    public double surface(){
        return Math.PI*grand-petit ;
    }

    public double perimetre(){
        return 2*Math.PI*Math.sqrt((Math.pow(grand, 2) + Math.pow(petit, 2))/2);
    }
}


public class Cercle extends Ellipse {
    
    public Cercle(double r){
        super(r,r);
    }
}


public class TestFigure {
    public static void main(String[] args) {
        
        Carre ca1 = new Carre(5);
        Cercle cer1 = new Cercle(5);

        Figure2D[] tab1 = new Figure2D[2];

        tab1[0]=ca1;
        tab1[1]=cer1;

        for (Figure2D x : tab1){
            System.out.println("Surface : " + x.surface() + " Perimetre : " + x.perimetre());
        }
    }
}

